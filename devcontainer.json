// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.194.3/containers/alpine
{
	"name": "Alpine",
	"build": {
		"dockerfile": "Dockerfile",
		// Update 'VARIANT' to pick an Alpine version: 3.11, 3.12, 3.13, 3.14
		"args": { "VARIANT": "3.13" }
	},

	// Set *default* container specific settings.json values on container create.
	"settings": {},
	"mounts": [
		// "type=bind,source=//var/run/docker.sock,target=/var/run/docker.sock"
		"type=bind,source=${localEnv:USERPROFILE}/.${localEnv:GITHUB_COMPANY_NAME}/${localWorkspaceFolderBasename}/config.clixml,target=/config/config.clixml,readonly",
		"type=bind,source=${localEnv:USERPROFILE}/.${localEnv:GITHUB_COMPANY_NAME}/${localWorkspaceFolderBasename}/state,target=/state"
	],

	// Add the IDs of extensions you want installed when the container is created.
	// Note that some extensions may not work in Alpine Linux. See https://aka.ms/vscode-remote/linux.
	"extensions": [
		"ms-azuretools.vscode-docker",
		"me-dutour-mathieu.vscode-github-actions",
		"cschleiden.vscode-github-actions",
		"ms-vscode.powershell",
		"fsevenm.run-it-on",
		"exiasr.hadolint"
	],

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "uname -a",

	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	// "runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],
	"runArgs": ["--init","-v","//var/run/docker.sock:/var/run/docker.sock"], // While technically optional, --init enables an init process to properly handle signals and ensure Zombie Processes are cleaned up.

	// Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode"
}